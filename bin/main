#!/usr/bin/env ruby

require_relative './lib/game_logic.rb'

# Say welcome for the players
puts 'Welcome to the Tic Tac Toe '

# Ask for the username
puts 'Player_one, Enter your name'
player_one_name = gets.chomp.capitalize
puts 'Player_two, Enter your name'

player_two_name = gets.chomp.capitalize


# Ask them to choose symbol

symp = false

while symp == false
  puts " #{player_one_name} Please enter your symbol [X, O]"
  player1_symp = gets.chomp.upcase
  if %w[X O].include?(player1_symp)
    symp = true
    player2_symp = (player1_symp == 'X' ? 'O' : 'X')
  else
    puts 'Invalid symbol'
  end
end

player1 = Player.new(player_one_name, player1_symp)
player2 = Player.new(player_two_name, player2_symp)

puts "Hi #{player1.name} and #{player2.name} welcome to Tic Tac Toe game"
puts "#{player1.name} your symbol is #{player1.symbol}"
puts "#{player2.name} your symbol is #{player2.symbol}"

# display the body game "the board"
game = Game.new
board = Board.new

repeat = false

# while repeat
  game_on = true
  # initial instructions for player
board.displayBoard
  while game_on
    winner = false
    draw = false

        # loop for each move
    puts '#{player1.name}, your turn. Choose a number between 1 and 9'
    movement = false
    while movement == false
      p_one = gets.chomp.to_i
      if board.board.include?(p_one)
        movement = true
        board.updateBoard(p_one, player1.symbol)
        board.displayBoard
        winner = game.check(game.checkWin(board.board, player1))
        puts "\n \nThe result is \n #{player1.name}(#{player1.getWinnings}) VS #{player2.name}(#{player2.getWinnings}) \n \n Draws >> #{game.draws} " if winner ==true 
        want = true if winner ==true 
        while want
          puts "Do you want to play again? [y, n]"
          again = gets.chomp
          if again == 'y'
            repeat = true
            want = false
          elsif again == "n"
            puts 'end game'
            want = false
            game_on = false
          end
        end

        if(board.board.any?(!Numeric))
          game.setDraws
          draw = true
          want = true
          while want
            puts "Do you want to play again? [y, n]"
            again = gets.chomp
            if again == 'y'
              repeat = true
              want = false
            elsif again == "n"
              puts 'end game'
              want = false
              game_on = false
            end
          end
        end
      else
        puts 'wrong input'
      end
    end
 

    # game_on = false if winner || draw
    break if winner || draw
    

    # loop for each move
    puts '#{player2.name}, your turn. Choose a number between 1 and 9'
    movement = false
    while movement == false
      p_two = gets.chomp.to_i
      if board.board.include?(p_two)
        movement = true
        board.updateBoard(p_two, player2.symbol)
        board.displayBoard
        winner = game.check(game.checkWin(board.board, player2))
        puts "\n \nThe result is \n #{player1.name}(#{player1.getWinnings}) VS #{player2.name}(#{player2.getWinnings}) \n \n Draws >> #{game.draws} \n \n" if winner ==true 
        want = true if winner ==true 
        while want
          puts "Do you want to play again? [y, n]"
          again = gets.chomp
          if again == 'y'
            repeat = true
            want = false
          elsif again == "n"
            puts 'end game'
            want = false
            game_on = false
          end
        end

        if(board.board.any?(!Numeric))
          game.setDraws
          draw = true
          want = true
          while want
            puts "Do you want to play again? [y, n]"
            again = gets.chomp
            if again == 'y'
              repeat = true
              want = false
            elsif again == "n"
              puts 'end game'
              want = false
              game_on = false
            end
          end
        end
      else
        puts 'wrong input'
      end
    end
    # game_on = false if winner || draw
    break if winner || draw
    end
 
  


# end  