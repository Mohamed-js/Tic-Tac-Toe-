#!/usr/bin/env ruby

require_relative '../lib/game_logic.rb'

# Say welcome for the players
puts 'Welcome to the Tic Tac Toe '

# Ask for the username
puts 'Player_one, Enter your name'
player_one_name = gets.chomp.capitalize
puts 'Player_two, Enter your name'

player_two_name = gets.chomp.capitalize


# Ask them to choose symbol

symp = false

while symp == false
  puts " #{player_one} Please enter your symbol [X, O]"
  player1_symp = gets.chomp.upcase
  if %w[X O].include?(player1_symp)
    symp = true
    player2_symp = (player1_symp == 'X' ? 'O' : 'X')
  else
    puts 'Invalid symbol'
  end
end

player1 = Player.new(player_one_name, player1_symp)
player1 = Player.new(player_two_name, player2_symp)

puts "Hi #{player1.name} and #{player2.name} welcome to Tic Tac Toe game"
puts "#{player1.name} your symbol is #{player1.symbol}"
puts "#{player2.name} your symbol is #{player2.symbol}"

# display the body game "the board"
game = Game.new
board = Board.new
# ask the first player to make his first move puts "Your movement"

game_on = true
winner = false
# initial instructions for player

while game_on
  puts 'Player_1 your turn. Choose a number between 1 and 9'
  # loop for each move
  movement = false
  while movement == false
    p_one = gets.chomp.to_i
    if board.board.include?(p_one)
      movement = true
      board.updateBoard(p_one, player1.symbol)
      board.displayBoard
      game.checkWin(board.board, player1.name)
    else
      puts 'wrong input'
    end
  end

  game_on = false if winner || draw
  

  # loop for each move
  puts 'Player_2 your turn. Choose a number between 1 and 9'
  movement = false
  while movement == false
    p_two = gets.chomp.to_i
    if board.board.include?(p_two)
      movement = true
      board.updateBoard(p_two, player2.symbol)
      board.displayBoard
    else
      puts 'wrong input'
    end
  end
  game_on = false if winner || draw

end



# display the result after winning
winning = 'winning cases'
if winning
  puts "The winner is #{winner}"

elsif draw
  puts 'There is no winner'
end

# Ask "do you want to play again ?" >> or close the game (y, n)
puts 'Do you want to play again? [y/n]'
again = gets.chomp
if again == 'y'
  puts 'play again'

elsif again == "n"
  puts 'end game'
end
